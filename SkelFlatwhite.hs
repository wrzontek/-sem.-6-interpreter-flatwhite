-- File generated by the BNF Converter (bnfc 2.9.3).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelFlatwhite where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsFlatwhite

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsFlatwhite.Ident -> Result
transIdent x = case x of
  AbsFlatwhite.Ident string -> failure x

transProgram :: Show a => AbsFlatwhite.Program' a -> Result
transProgram x = case x of
  AbsFlatwhite.Program _ topdefs -> failure x

transTopDef :: Show a => AbsFlatwhite.TopDef' a -> Result
transTopDef x = case x of
  AbsFlatwhite.FnDef _ type_ ident args block -> failure x

transArg :: Show a => AbsFlatwhite.Arg' a -> Result
transArg x = case x of
  AbsFlatwhite.Arg _ type_ ident -> failure x

transBlock :: Show a => AbsFlatwhite.Block' a -> Result
transBlock x = case x of
  AbsFlatwhite.Block _ stmts -> failure x

transStmt :: Show a => AbsFlatwhite.Stmt' a -> Result
transStmt x = case x of
  AbsFlatwhite.Empty _ -> failure x
  AbsFlatwhite.BStmt _ block -> failure x
  AbsFlatwhite.Decl _ type_ items -> failure x
  AbsFlatwhite.ConstDecl _ type_ items -> failure x
  AbsFlatwhite.Ass _ ident expr -> failure x
  AbsFlatwhite.Ret _ expr -> failure x
  AbsFlatwhite.VRet _ -> failure x
  AbsFlatwhite.Cond _ expr stmt -> failure x
  AbsFlatwhite.CondElse _ expr stmt1 stmt2 -> failure x
  AbsFlatwhite.While _ expr stmt -> failure x
  AbsFlatwhite.For _ ident expr1 expr2 stmt -> failure x
  AbsFlatwhite.SExp _ expr -> failure x

transItem :: Show a => AbsFlatwhite.Item' a -> Result
transItem x = case x of
  AbsFlatwhite.NoInit _ ident -> failure x
  AbsFlatwhite.Init _ ident expr -> failure x

transType :: Show a => AbsFlatwhite.Type' a -> Result
transType x = case x of
  AbsFlatwhite.Int _ -> failure x
  AbsFlatwhite.Str _ -> failure x
  AbsFlatwhite.Bool _ -> failure x
  AbsFlatwhite.Void _ -> failure x
  AbsFlatwhite.Fun _ type_ types -> failure x

transExpr :: Show a => AbsFlatwhite.Expr' a -> Result
transExpr x = case x of
  AbsFlatwhite.EVar _ ident -> failure x
  AbsFlatwhite.ELitInt _ integer -> failure x
  AbsFlatwhite.ELitTrue _ -> failure x
  AbsFlatwhite.ELitFalse _ -> failure x
  AbsFlatwhite.EApp _ ident exprs -> failure x
  AbsFlatwhite.EString _ string -> failure x
  AbsFlatwhite.Neg _ expr -> failure x
  AbsFlatwhite.Not _ expr -> failure x
  AbsFlatwhite.EMul _ expr1 mulop expr2 -> failure x
  AbsFlatwhite.EAdd _ expr1 addop expr2 -> failure x
  AbsFlatwhite.ERel _ expr1 relop expr2 -> failure x
  AbsFlatwhite.EAnd _ expr1 expr2 -> failure x
  AbsFlatwhite.EOr _ expr1 expr2 -> failure x

transAddOp :: Show a => AbsFlatwhite.AddOp' a -> Result
transAddOp x = case x of
  AbsFlatwhite.Plus _ -> failure x
  AbsFlatwhite.Minus _ -> failure x

transMulOp :: Show a => AbsFlatwhite.MulOp' a -> Result
transMulOp x = case x of
  AbsFlatwhite.Times _ -> failure x
  AbsFlatwhite.Div _ -> failure x
  AbsFlatwhite.Mod _ -> failure x

transRelOp :: Show a => AbsFlatwhite.RelOp' a -> Result
transRelOp x = case x of
  AbsFlatwhite.LTH _ -> failure x
  AbsFlatwhite.LE _ -> failure x
  AbsFlatwhite.GTH _ -> failure x
  AbsFlatwhite.GE _ -> failure x
  AbsFlatwhite.EQU _ -> failure x
  AbsFlatwhite.NE _ -> failure x
